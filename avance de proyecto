#include <iostream>
#include <string>
#include <cstdlib>
using namespace std;

// Estructura para organizar mejor los datos
struct Proceso {
    int id;
    string tipo;
    string descripcion;
    string fecha_creacion;
    string estado;
    string responsable;
};

// Funciones del sistema
void mostrarMenu();
void agregarProceso(Proceso procesos[], int &total);
void cambiarEstado(Proceso procesos[], int total);
void mostrarProcesos(Proceso procesos[], int total);
void buscarProceso(Proceso procesos[], int total);
void eliminarProceso(Proceso procesos[], int &total);
void mostrarProcesosDetallados(Proceso procesos[], int total);
void buscarPorTipo(Proceso procesos[], int total);
void buscarPorEstado(Proceso procesos[], int total);
void mostrarEstadisticas(Proceso procesos[], int total);
int validarID(Proceso procesos[], int total, int id);
int validarTipo(string tipo);
int validarEstado(string estado);
void limpiarPantalla();

int main() {
    Proceso procesos[100];
    int total_procesos = 0;
    int opcion;
    
    do {
        mostrarMenu();
        cout << "Seleccione una opcion: ";
        cin >> opcion;
        cin.ignore();
        cout << "\n";
        
        switch(opcion) {
            case 1:
                agregarProceso(procesos, total_procesos);
                break;
            case 2:
                cambiarEstado(procesos, total_procesos);
                break;
            case 3:
                mostrarProcesos(procesos, total_procesos);
                break;
            case 4:
                mostrarProcesosDetallados(procesos, total_procesos);
                break;
            case 5:
                buscarProceso(procesos, total_procesos);
                break;
            case 6:
                buscarPorTipo(procesos, total_procesos);
                break;
            case 7:
                buscarPorEstado(procesos, total_procesos);
                break;
            case 8:
                eliminarProceso(procesos, total_procesos);
                break;
            case 9:
                mostrarEstadisticas(procesos, total_procesos);
                break;
            case 0:
                cout << "=== Saliendo del sistema... ===\n";
                cout << "Gracias por usar el SGPE!\n";
                break;
            default:
                cout << "*** Opcion invalida. Intente nuevamente. ***\n";
        }
        
        if(opcion != 0) {
            cout << "\nPresione ENTER para continuar...";
            cin.get();
        }
        
    } while(opcion != 0);
    
    return 0;
}

void mostrarMenu() {
    limpiarPantalla();
    cout << "================================================================\n";
    cout << "     SISTEMA DE GESTION DE PROCESOS EDUCATIVOS (SGPE)\n";
    cout << "================================================================\n";
    cout << "  GESTION DE PROCESOS:\n";
    cout << "    1. Agregar nuevo proceso\n";
    cout << "    2. Cambiar estado de un proceso\n";
    cout << "    3. Mostrar todos los procesos (resumen)\n";
    cout << "    4. Mostrar todos los procesos (detallado)\n";
    cout << "\n  BUSQUEDA Y FILTROS:\n";
    cout << "    5. Buscar proceso por ID\n";
    cout << "    6. Filtrar procesos por tipo\n";
    cout << "    7. Filtrar procesos por estado\n";
    cout << "\n  OTRAS OPCIONES:\n";
    cout << "    8. Eliminar proceso\n";
    cout << "    9. Mostrar estadisticas\n";
    cout << "    0. Salir\n";
    cout << "================================================================\n";
}

void agregarProceso(Proceso procesos[], int &total) {
    cout << "============== AGREGAR NUEVO PROCESO ==============\n\n";
    
    Proceso nuevo;
    
    cout << "Ingrese ID del proceso (numero): ";
    cin >> nuevo.id;
    cin.ignore();
    
    // Validar ID Ãºnico (retorna 1 si existe, 0 si no existe)
    if(validarID(procesos, total, nuevo.id) == 1) {
        cout << "\n*** Error: Ya existe un proceso con ese ID. ***\n";
        return;
    }
    
    cout << "\nTipos disponibles:\n";
    cout << "  - Matricula\n";
    cout << "  - Evaluacion\n";
    cout << "  - Asistencia\n";
    cout << "  - Inventario\n";
    cout << "Ingrese tipo de proceso: ";
    getline(cin, nuevo.tipo);
    
    if(validarTipo(nuevo.tipo) == 0) {
        cout << "\n*** Error: Tipo de proceso invalido. ***\n";
        return;
    }
    
    cout << "Ingrese descripcion del proceso: ";
    getline(cin, nuevo.descripcion);
    
    cout << "Ingrese fecha de creacion (dd/mm/aaaa): ";
    getline(cin, nuevo.fecha_creacion);
    
    cout << "\nEstados disponibles:\n";
    cout << "  - Pendiente\n";
    cout << "  - En_ejecucion\n";
    cout << "  - Finalizado\n";
    cout << "Ingrese estado: ";
    getline(cin, nuevo.estado);
    
    if(validarEstado(nuevo.estado) == 0) {
        cout << "\n*** Error: Estado invalido. ***\n";
        return;
    }
    
    cout << "Ingrese ID del responsable (ID_Usuario): ";
    getline(cin, nuevo.responsable);
    
    // Validar campos obligatorios
    if(nuevo.tipo.empty() || nuevo.descripcion.empty() || nuevo.responsable.empty()) {
        cout << "\n*** Error: Algunos campos obligatorios estan vacios. ***\n";
        return;
    }
    
    // Guardar el proceso
    procesos[total] = nuevo;
    total++;
    
    cout << "\n================================================================\n";
    cout << "          PROCESO AGREGADO CORRECTAMENTE\n";
    cout << "================================================================\n";
    cout << "  ID: " << nuevo.id << "\n";
    cout << "  Tipo: " << nuevo.tipo << "\n";
    cout << "  Estado: " << nuevo.estado << "\n";
    cout << "================================================================\n";
}

void cambiarEstado(Proceso procesos[], int total) {
    cout << "============== CAMBIAR ESTADO DE PROCESO ==============\n\n";
    
    if(total == 0) {
        cout << "*** No hay procesos registrados. ***\n";
        return;
    }
    
    int id;
    cout << "Ingrese el ID del proceso a modificar: ";
    cin >> id;
    cin.ignore();
    
    int encontrado = 0;
    for(int i = 0; i < total; i++) {
        if(procesos[i].id == id) {
            encontrado = 1;
            cout << "\n--- Datos del proceso ---\n";
            cout << "ID: " << procesos[i].id << "\n";
            cout << "Tipo: " << procesos[i].tipo << "\n";
            cout << "Descripcion: " << procesos[i].descripcion << "\n";
            cout << "Estado actual: " << procesos[i].estado << "\n";
            
            cout << "\nEstados disponibles:\n";
            cout << "  - Pendiente\n";
            cout << "  - En_ejecucion\n";
            cout << "  - Finalizado\n";
            cout << "Ingrese el nuevo estado: ";
            
            string nuevoEstado;
            getline(cin, nuevoEstado);
            
            if(validarEstado(nuevoEstado) == 0) {
                cout << "\n*** Error: Estado invalido. ***\n";
                return;
            }
            
            procesos[i].estado = nuevoEstado;
            cout << "\n=== Estado actualizado correctamente ===\n";
            cout << "Nuevo estado: " << procesos[i].estado << "\n";
            break;
        }
    }
    
    if(encontrado == 0) {
        cout << "\n*** No se encontro un proceso con ese ID. ***\n";
    }
}

void mostrarProcesos(Proceso procesos[], int total) {
    cout << "============== LISTA DE PROCESOS (RESUMEN) ==============\n\n";
    
    if(total == 0) {
        cout << "*** No hay procesos registrados. ***\n";
        return;
    }
    
    cout << "ID       TIPO                 ESTADO               RESPONSABLE    \n";
    cout << "----------------------------------------------------------------\n";
    
    for(int i = 0; i < total; i++) {
        // Imprimir ID
        cout << procesos[i].id;
        if(procesos[i].id < 10) cout << "        ";
        else if(procesos[i].id < 100) cout << "       ";
        else cout << "      ";
        
        // Imprimir Tipo
        cout << procesos[i].tipo;
        int espacios = 21 - procesos[i].tipo.length();
        for(int j = 0; j < espacios; j++) cout << " ";
        
        // Imprimir Estado
        cout << procesos[i].estado;
        espacios = 21 - procesos[i].estado.length();
        for(int j = 0; j < espacios; j++) cout << " ";
        
        // Imprimir Responsable
        cout << procesos[i].responsable << "\n";
    }
    
    cout << "----------------------------------------------------------------\n";
    cout << "Total de procesos: " << total << "\n";
}

void mostrarProcesosDetallados(Proceso procesos[], int total) {
    cout << "============== LISTA DE PROCESOS (DETALLADO) ==============\n\n";
    
    if(total == 0) {
        cout << "*** No hay procesos registrados. ***\n";
        return;
    }
    
    for(int i = 0; i < total; i++) {
        cout << "================================================================\n";
        cout << "  PROCESO #" << (i+1) << "\n";
        cout << "================================================================\n";
        cout << "  ID:              " << procesos[i].id << "\n";
        cout << "  Tipo:            " << procesos[i].tipo << "\n";
        cout << "  Descripcion:     " << procesos[i].descripcion << "\n";
        cout << "  Fecha Creacion:  " << procesos[i].fecha_creacion << "\n";
        cout << "  Estado:          " << procesos[i].estado << "\n";
        cout << "  Responsable:     " << procesos[i].responsable << "\n";
        cout << "================================================================\n\n";
    }
    
    cout << "Total de procesos: " << total << "\n";
}

void buscarProceso(Proceso procesos[], int total) {
    cout << "============== BUSCAR PROCESO POR ID ==============\n\n";
    
    if(total == 0) {
        cout << "*** No hay procesos registrados. ***\n";
        return;
    }
    
    int id;
    cout << "Ingrese el ID del proceso a buscar: ";
    cin >> id;
    cin.ignore();
    
    int encontrado = 0;
    for(int i = 0; i < total; i++) {
        if(procesos[i].id == id) {
            encontrado = 1;
            cout << "\n================================================================\n";
            cout << "  PROCESO ENCONTRADO\n";
            cout << "================================================================\n";
            cout << "  ID:              " << procesos[i].id << "\n";
            cout << "  Tipo:            " << procesos[i].tipo << "\n";
            cout << "  Descripcion:     " << procesos[i].descripcion << "\n";
            cout << "  Fecha Creacion:  " << procesos[i].fecha_creacion << "\n";
            cout << "  Estado:          " << procesos[i].estado << "\n";
            cout << "  Responsable:     " << procesos[i].responsable << "\n";
            cout << "================================================================\n";
            break;
        }
    }
    
    if(encontrado == 0) {
        cout << "\n*** No se encontro un proceso con ese ID. ***\n";
    }
}

void buscarPorTipo(Proceso procesos[], int total) {
    cout << "============== FILTRAR PROCESOS POR TIPO ==============\n\n";
    
    if(total == 0) {
        cout << "*** No hay procesos registrados. ***\n";
        return;
    }
    
    string tipo;
    cout << "Tipos disponibles: Matricula, Evaluacion, Asistencia, Inventario\n";
    cout << "Ingrese el tipo a buscar: ";
    getline(cin, tipo);
    
    int contador = 0;
    cout << "\n--- Procesos de tipo: " << tipo << " ---\n\n";
    
    for(int i = 0; i < total; i++) {
        if(procesos[i].tipo == tipo) {
            contador++;
            cout << "ID: " << procesos[i].id 
                 << " | Descripcion: " << procesos[i].descripcion 
                 << " | Estado: " << procesos[i].estado << "\n";
        }
    }
    
    if(contador == 0) {
        cout << "*** No se encontraron procesos de este tipo. ***\n";
    } else {
        cout << "\nTotal encontrado: " << contador << " proceso(s)\n";
    }
}

void buscarPorEstado(Proceso procesos[], int total) {
    cout << "============== FILTRAR PROCESOS POR ESTADO ==============\n\n";
    
    if(total == 0) {
        cout << "*** No hay procesos registrados. ***\n";
        return;
    }
    
    string estado;
    cout << "Estados disponibles: Pendiente, En_ejecucion, Finalizado\n";
    cout << "Ingrese el estado a buscar: ";
    getline(cin, estado);
    
    int contador = 0;
    cout << "\n--- Procesos con estado: " << estado << " ---\n\n";
    
    for(int i = 0; i < total; i++) {
        if(procesos[i].estado == estado) {
            contador++;
            cout << "ID: " << procesos[i].id 
                 << " | Tipo: " << procesos[i].tipo 
                 << " | Responsable: " << procesos[i].responsable << "\n";
        }
    }
    
    if(contador == 0) {
        cout << "*** No se encontraron procesos con este estado. ***\n";
    } else {
        cout << "\nTotal encontrado: " << contador << " proceso(s)\n";
    }
}

void eliminarProceso(Proceso procesos[], int &total) {
    cout << "============== ELIMINAR PROCESO ==============\n\n";
    
    if(total == 0) {
        cout << "*** No hay procesos registrados. ***\n";
        return;
    }
    
    int id;
    cout << "Ingrese el ID del proceso a eliminar: ";
    cin >> id;
    cin.ignore();
    
    int encontrado = 0;
    for(int i = 0; i < total; i++) {
        if(procesos[i].id == id) {
            encontrado = 1;
            
            // Mostrar datos del proceso a eliminar
            cout << "\n--- Proceso a eliminar ---\n";
            cout << "ID: " << procesos[i].id << "\n";
            cout << "Tipo: " << procesos[i].tipo << "\n";
            cout << "Descripcion: " << procesos[i].descripcion << "\n";
            
            // Confirmar eliminaciÃ³n
            char confirmacion;
            cout << "\nEsta seguro que desea eliminar este proceso? (S/N): ";
            cin >> confirmacion;
            cin.ignore();
            
            if(confirmacion == 'S' || confirmacion == 's') {
                // Desplazar los elementos hacia atrÃ¡s
                for(int j = i; j < total - 1; j++) {
                    procesos[j] = procesos[j + 1];
                }
                total--;
                cout << "\n=== Proceso eliminado correctamente ===\n";
            } else {
                cout << "\n=== Eliminacion cancelada ===\n";
            }
            break;
        }
    }
    
    if(encontrado == 0) {
        cout << "\n*** No se encontro un proceso con ese ID. ***\n";
    }
}

void mostrarEstadisticas(Proceso procesos[], int total) {
    cout << "============== ESTADISTICAS DEL SISTEMA ==============\n\n";
    
    if(total == 0) {
        cout << "*** No hay procesos registrados. ***\n";
        return;
    }
    
    // Contadores por tipo
    int matricula = 0, evaluacion = 0, asistencia = 0, inventario = 0;
    // Contadores por estado
    int pendiente = 0, en_ejecucion = 0, finalizado = 0;
    
    for(int i = 0; i < total; i++) {
        // Contar por tipo
        if(procesos[i].tipo == "Matricula") matricula++;
        else if(procesos[i].tipo == "Evaluacion") evaluacion++;
        else if(procesos[i].tipo == "Asistencia") asistencia++;
        else if(procesos[i].tipo == "Inventario") inventario++;
        
        // Contar por estado
        if(procesos[i].estado == "Pendiente") pendiente++;
        else if(procesos[i].estado == "En_ejecucion") en_ejecucion++;
        else if(procesos[i].estado == "Finalizado") finalizado++;
    }
    
    cout << "TOTAL DE PROCESOS: " << total << "\n\n";
    
    cout << "--- PROCESOS POR TIPO ---\n";
    cout << "  Matricula:   " << matricula << " (" << (matricula*100.0/total) << "%)\n";
    cout << "  Evaluacion:  " << evaluacion << " (" << (evaluacion*100.0/total) << "%)\n";
    cout << "  Asistencia:  " << asistencia << " (" << (asistencia*100.0/total) << "%)\n";
    cout << "  Inventario:  " << inventario << " (" << (inventario*100.0/total) << "%)\n\n";
    
    cout << "--- PROCESOS POR ESTADO ---\n";
    cout << "  Pendiente:     " << pendiente << " (" << (pendiente*100.0/total) << "%)\n";
    cout << "  En ejecucion:  " << en_ejecucion << " (" << (en_ejecucion*100.0/total) << "%)\n";
    cout << "  Finalizado:    " << finalizado << " (" << (finalizado*100.0/total) << "%)\n";
    
    cout << "\n================================================================\n";
}

// Retorna 1 si el ID ya existe, 0 si no existe
int validarID(Proceso procesos[], int total, int id) {
    for(int i = 0; i < total; i++) {
        if(procesos[i].id == id) {
            return 1; // ID ya existe
        }
    }
    return 0; // ID disponible
}

// Retorna 1 si el tipo es vÃ¡lido, 0 si no lo es
int validarTipo(string tipo) {
    if(tipo == "Matricula" || tipo == "Evaluacion" || 
       tipo == "Asistencia" || tipo == "Inventario") {
        return 1;
    }
    return 0;
}

// Retorna 1 si el estado es vÃ¡lido, 0 si no lo es
int validarEstado(string estado) {
    if(estado == "Pendiente" || estado == "En_ejecucion" || 
       estado == "Finalizado") {
        return 1;
    }
    return 0;
}

void limpiarPantalla() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}
